plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'net.researchgate.release' version '2.8.1'
}

ext {
    jdk = JavaVersion.current().majorVersion
    jdk_javadoc = "https://docs.oracle.com/javase/$jdk/docs/api/".toString()
    if (JavaVersion.current().isJava11Compatible()) {
        jdk_javadoc = "https://docs.oracle.com/en/java/javase/$jdk/docs/api/".toString()
    }

    reactor_bom_version = 'Dysprosium-SR2'
    jackson_version = '2.10.2'
    immutables_version = '2.8.1'

    isJitpack = "true" == System.getenv("JITPACK")
    isRelease = !version.toString().endsWith('-SNAPSHOT')
}

group 'com.discord4j'
description 'Discord entity domain as immutable Jackson objects'

sourceCompatibility = 8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/staging' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    api "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
    compileOnly platform("io.projectreactor:reactor-bom:$reactor_bom_version")
    compileOnly 'io.projectreactor:reactor-core'

    compileOnly "org.immutables:value:$immutables_version"
    annotationProcessor "org.immutables:value:$immutables_version"

    testCompileOnly "org.immutables:value:$immutables_version"
    testAnnotationProcessor "org.immutables:value:$immutables_version"
    testCompile 'junit:junit:4.12'
}

compileJava {
    options.fork = false
    options.incremental = false
    //options.compilerArgs += ["-Xmaxerrs 1000000", "-Xlint"]
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

tasks.withType(Javadoc) {
    title = "$archivesBaseName ${version} API"
    options {
        windowTitle = "$archivesBaseName ($version)"
        encoding = 'UTF-8'
        tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]
        addStringOption 'Xdoclint:none', '-quiet'
        addStringOption 'encoding', 'UTF-8'
        // adding links to javadocs for filling specific classes when not existing inside current javadoc
        links = [
                jdk_javadoc,
                "https://fasterxml.github.io/jackson-databind/javadoc/2.10/",
                "http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
                "https://projectreactor.io/docs/core/release/api/"
        ]
    }
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId archivesBaseName

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = "$project.name"
                description = 'Discord entity domain as immutable Jackson objects'
                url = 'https://github.com/Discord4J/discord-json'
                organization {
                    name = 'Discord4J'
                    url = 'https://discord4j.com'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/Discord4J/discord-json/issues'
                }
                licenses {
                    license {
                        name = 'LGPL-3.0'
                        url = 'https://github.com/Discord4J/discord-json/LICENSE.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/Discord4J/discord-json'
                    connection = 'scm:git:git://github.com/Discord4J/discord-json.git'
                    developerConnection = 'scm:git:ssh://git@github.com:Discord4J/discord-json.git'
                }
                developers {
                    developer {
                        name = 'The Discord4J Team'
                    }
                }
            }
        }
    }

    if (!isJitpack) {
        repositories {
            maven {
                if (isRelease) {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                } else {
                    url 'https://oss.sonatype.org/content/repositories/snapshots'
                }
                def sonatypeUsername = findProperty('sonatypeUsername')
                def sonatypePassword = findProperty('sonatypePassword')
                if (sonatypeUsername != null && sonatypePassword != null) {
                    credentials {
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        }
    }
}

if (!isJitpack && isRelease) {
    signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        if (signingKey != null && signingPassword != null) {
            useInMemoryPgpKeys(new String(signingKey.decodeBase64()), signingPassword as String)
        }
        sign publishing.publications.mavenJava
    }
}

release {
    preTagCommitMessage = 'Release version'
    tagCommitMessage = 'Release version'
    newVersionCommitMessage = 'Next development version'
    git {
        requireBranch = ''
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
